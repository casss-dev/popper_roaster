// LIBRARIES //
#include <PID_v1.h>
#include "max6675.h"

// PID values
float P = 7.3; float I = 2.4; float D = 12.8;
// float P = 7.3; float I = 2.6; float D = 12.8; (worked, but a little over got to SP quicker)
//float P = 7.3; float I = 2.4; float D = 12.7; (worked but a little under and took a while to get to SP)

// temp at each phase
int tempProfile [] = { 80, 124, 165, 203, 235, 270, 290, 318, 341, 354, 372, 386, 408, 418, 427, 441, 443, 446, 450, 455, 457 };

// time at each phase
int timeProfile [] = { 0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 }; // 10 min

// booleans
bool manualOn = false;
bool off = true;

// time values
int phase = 0;
int prevPhase = -1;
int startTime = 0;
int currentTime = 0;
int nowTime; // printing
int serialTime = 0;
static const unsigned long LOOP_INTERVAL = 1000; // ms
int lastTime = 0;

int printInterval = 0;
int rorInterval = 0;

// temperature values
float temperature = 0.0;
int overshoot = 70;
int countdown = 0;
float slope = 0;

// for rate of rise
float prevTemperature = 0.0;

// user controls
String userIn;

// pins
const int heaterPin = 11;
int heaterpwm = 0;
int pot5v = 7;
int potPin = A0;

const int ktcSO = 8;
const int ktcCS = 9;
const int ktcCLK = 10;

// PID
double Setpoint, Input, Output;
int pidPick = 0;

PID myPID(&Input, &Output, &Setpoint, P, I, D, DIRECT); // initialize tuning parameters

// thermocouple
MAX6675 ktc(ktcCLK, ktcCS, ktcSO);

void setup() {
  Serial.begin(9600);

  pinMode(heaterPin, OUTPUT);
  analogWrite(heaterPin, 0);

  if (manualOn)
  {
    myPID.SetMode(MANUAL);
    digitalWrite(potPin, HIGH);
  }
  else {
    myPID.SetMode(AUTOMATIC);
  }

  // give the MAX a little time to settle
  delay(500);

  Serial.println("Roasting machine is ready");
  if (manualOn) Serial.println("Roaster is set to manual control.");
  else Serial.println("Roaster is set to automatic control.");

  prevTemperature = ktc.readFahrenheit() - 10;
}

void loop() {

  userControls();

  if (!off) {
    currentTime = millis() - startTime;

    if (currentTime - lastTime >= LOOP_INTERVAL) {
      lastTime += LOOP_INTERVAL;
      timeSyncLoop();
    }
  }
  else {
    analogWrite(heaterPin, 0);
  }
}

void timeSyncLoop() {
  temperature = ktc.readFahrenheit() - 10;

  // PID Loop
  Input = temperature;

  if (phase == 0) {
    Setpoint = tempProfile [phase]; // jump directly to setpoint in first phase
    if (temperature >= Setpoint) {
      countdown = -1;
    }
  }
  // if countdown ends, start new phase and count down
  if (countdown < 0) {
    phase = phase + 1;
    serialTime = millis() / 1000;
    serialTime = serialTime + (timeProfile[phase]);

    slope = ((tempProfile[phase]) - (tempProfile[(phase - 1)]));
    slope = (slope / (timeProfile[phase]));
  }
  // determine setpoint during phase 1+
  if (phase > 0) {
    countdown = serialTime - ((millis() / 1000));
    Setpoint = tempProfile[(phase - 1)] + (slope * ((timeProfile[phase]) - countdown));
  }

  // output PID
  myPID.Compute();
  heaterpwm = map (Output, 0, 255, 0, 255);

  if (temperature < (Setpoint + overshoot)) {
    analogWrite(heaterPin, heaterpwm);
  }
  else {
    analogWrite(heaterPin, 0);
  }

  printValues();
}

void printValues() {
  printInterval++;
  rorInterval++;

  if (printInterval == 6) {
    printInterval = 0;

    nowTime = millis() / 1000;

    Serial.print(nowTime / 60); // min
    Serial.print(":");
    if (nowTime % 60 < 10) Serial.print("0");
    Serial.print(nowTime % 60); // sec
    Serial.print(", ");
    Serial.print(temperature); // BT
    Serial.print(", ");
    Serial.print(Setpoint); // PID

    if (rorInterval == 30) // ror should print every 30 seconds this way...
    {
      Serial.print(", ");
      Serial.print(heaterpwm); // heaterPWM

      Serial.print(", ");
      
      Serial.println(temperature - prevTemperature); // RoR
      
      rorInterval = 0;
      prevTemperature = temperature;
    }
    else
    {
      Serial.print(", ");

      Serial.println(heaterpwm); // heaterPWM
    }
  }
}

void userControls()
{
  if (Serial.available() > 0)
  {
    userIn = Serial.readStringUntil('\n');

    if (userIn == "off") {
      off = true;
      analogWrite(heaterPin, 0);
      Serial.println("Roaster is now off.");
    }
    if (userIn == "on") {
      off = false;
      startTime = millis();
      Serial.println("Roaster is now on.");
      Serial.println("Time, BT, PID, HeaterPower, RoR, Data Labels");
    }
    if (userIn == "de") {
      Serial.println("DE");
    }
    if (userIn == "fc") {
      Serial.println("FC");
    }
    if (userIn == "fce") {
      Serial.println("FCE");
    }
    if (userIn == "sc") {
      Serial.println("SC");
    }
    if (userIn == "p") {
      Serial.println("Choose a value for P:");
      pidPick = 1;
    }
    if (userIn == "i") {
      Serial.println("Choose a value for I:");
      pidPick = 2;
    }
    if (userIn == "d") {
      Serial.println("Choose a value for D:");
      pidPick = 3;
    }

    if (pidPick != 0)
    {
      if (isDigit(userIn.charAt(0)))
      {
        switch (pidPick)
        {
          case 1:
            P = userIn.toFloat();
            break;

          case 2:
            I = userIn.toFloat();
            break;

          case 3:
            D = userIn.toFloat();
            break;
        }
        pidPick = 0;
        Serial.print("P: ");
        Serial.print(P);
        Serial.print(" I: ");
        Serial.print(I);
        Serial.print(" D: ");
        Serial.println(D);
      }
    }
  }
}
